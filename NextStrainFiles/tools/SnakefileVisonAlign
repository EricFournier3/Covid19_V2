from os import environ
from packaging import version
from socket import getfqdn
from getpass import getuser
from snakemake.logging import logger
import sys
import stat
import shutil
from shutil import which
import logging
import datetime
from datetime import timedelta
import os
import pandas as pd
import subprocess
from Bio import AlignIO
from Bio import SeqIO


logging.basicConfig(level=logging.DEBUG)

#TODO choose here
only_human = False


#
# Verify that required versions of dependencies are installed.
#
MIN_AUGUR_VERSION = "7.0.2"

try:
    from augur.__version__ import __version__ as augur_version
except ModuleNotFoundError:
    logger.error("ERROR: Could not find augur. Follow installation instructions at https://nextstrain.org/docs/ and try again.")
    sys.exit(1)

if version.parse(augur_version) < version.parse(MIN_AUGUR_VERSION):
    logger.error("ERROR: Found version '%s' of augur, but version '%s' or greater is required" % (augur_version, MIN_AUGUR_VERSION))
    sys.exit(1)

SHELL_COMMANDS_NEEDED = ["augur", "iqtree", "mafft"]
for sh_cmd in SHELL_COMMANDS_NEEDED:
    if not which(sh_cmd):
        logger.error(f"ERROR: `{sh_cmd}` is not available as a shell command. Please follow installation instructions at https://nextstrain.org/docs/ and try again.")
        sys.exit(1)


def get_todays_date():
    date = datetime.datetime.today().strftime('%Y-%m-%d')
    return date

base_dir = "/data/PROJETS/COVID-19_Epidemio/Vison/"
script_dir = "/data/Applications/GitScript/Covid19_V2/NextStrainFiles/scripts/"
tool_dir = "/data/Applications/GitScript/Covid19_V2/NextStrainFiles/tools/"

if not only_human:
    align_out_dir = os.path.join(base_dir,"alignment_results_mink_and_mink_to_human_V2")
else:
    #align_out_dir = os.path.join(base_dir,"alignment_results_mink_to_human_only")
    align_out_dir = os.path.join(base_dir,"alignment_results_mink_to_human_only_V2")

gisaid_fasta_all = os.path.join(base_dir,"sequences_2020-11-12_07-33.fasta")
reference = os.path.join(base_dir,"reference.gb")
gisaid_fasta_mink = os.path.join(base_dir,"gisaid_extract_temp.fasta")
metadata_all = os.path.join(base_dir,"metadata_2020-11-12_10-27.tsv")
pd_metadata_all = pd.read_csv(metadata_all,sep="\t",index_col=False)

pd_metadata_mink = pd_metadata_all.loc[pd_metadata_all['host'] == 'Neovison vison',:].copy()

#from S:\Partage\LSPQ_Partage\DiagnosticMoleculaire\PROJETS\Covid19\4-Analyses\Vison\Dutch mutations of mink-associated SARS-CoV-2 Nov2020.pdf
gisaid_epi_dirk_eggink_paper = os.path.join(base_dir,"GISAID_DirkEggink.txt")
gisaid_epi_dirk_eggink_list =  []

with open(gisaid_epi_dirk_eggink_paper) as de_file:
    for line in de_file:
        epi = line.strip('\n').strip(' ')
        gisaid_epi_dirk_eggink_list.append(epi)

#print(gisaid_epi_dirk_eggink_list)


#from S:\Partage\LSPQ_Partage\DiagnosticMoleculaire\PROJETS\Covid19\4-Analyses\Vison\MinkToHumanpdf_Method.pdf Figures S1
#EPI_ISL_461203   EPI_ISL_461202 EPI_ISL_461200 EPI_ISL_461192 EPI_ISL_461191 EPI_ISL_461190

#from S:\Partage\LSPQ_Partage\DiagnosticMoleculaire\PROJETS\Covid19\4-Analyses\Vison\RRA-SARS-CoV-2-in-mink-12-nov-2020.pdf
#EPI_ISL_618040  EPI_ISL_616269 EPI_ISL_616695

gisaid_mink_to_human = ['EPI_ISL_461203','EPI_ISL_461202', 'EPI_ISL_461200', 'EPI_ISL_461192', 'EPI_ISL_461191', 'EPI_ISL_461190', 'EPI_ISL_618040',  'EPI_ISL_616269', 'EPI_ISL_616695']

pd_metadata_mink_to_human = pd_metadata_all.loc[(pd_metadata_all['gisaid_epi_isl'].isin(gisaid_mink_to_human)) & (pd_metadata_all['host']=='Human'),:].copy()
pd_metadata_dirk_eggink = pd_metadata_all.loc[(pd_metadata_all['gisaid_epi_isl'].isin(gisaid_epi_dirk_eggink_list)) & (pd_metadata_all['host']=='Human'),:].copy()


if only_human:
    pd_all = pd.concat([pd_metadata_mink_to_human,pd_metadata_dirk_eggink])
else:
    pd_all = pd.concat([pd_metadata_mink_to_human,pd_metadata_mink,pd_metadata_dirk_eggink])

pd_all = pd_all.drop_duplicates('gisaid_epi_isl',keep='last')

#print("Nb rows ",pd_all.shape[0])

rec_to_keep = []
strain_to_keep_from_metadata = list(pd_all['strain'])

check = 0

for rec in SeqIO.parse(gisaid_fasta_all,'fasta'):
    check += 1
    sys.stdout.write("Gisaid check >>> %d\r"%check)
    sys.stdout.flush()
    if str(rec.id) in strain_to_keep_from_metadata:
        rec_to_keep.append(rec)

SeqIO.write(rec_to_keep,gisaid_fasta_mink,'fasta')

'''
Desactive car temps d execution trop long
for index,row in pd_all.iterrows():
    strain = str(row['strain'])
    #print(strain)
    subprocess.call(["seqkit","grep","-r","-p","^" + str(strain),gisaid_fasta_all],stdout=open(gisaid_fasta_mink,"a"))
'''


rule files: 
    params:
        reference = reference,
        to_align =  gisaid_fasta_mink

files = rules.files.params

#print(files.reference)


checkpoint partition_sequences:
    input:
        sequences = files.to_align
    output:
        split_sequences = directory(os.path.join(align_out_dir,"split_sequences/pre/"))
    params:
        sequences_per_group = 150,
        script_dir = script_dir
    shell:
        """
        python3 {params.script_dir}partition-sequences.py \
            --sequences {input.sequences} \
            --sequences-per-group {params.sequences_per_group} \
            --output-dir {output.split_sequences}
        """

rule partitions_intermediate:
    message:
        """
        partitions_intermediate: Copying sequence fastas
        {wildcards.cluster}
        """
    input:
        os.path.join(align_out_dir,"split_sequences/pre/{cluster}.fasta")
    output:
        os.path.join(align_out_dir,"split_sequences/post/{cluster}.fasta")
    shell:
        "cp {input} {output}"

rule align:
    message:
        """
        Aligning sequences to {input.reference}
          - gaps relative to reference are considered real
        Cluster:  {wildcards.cluster}
        """
    input:
        sequences = rules.partitions_intermediate.output,
        reference = files.reference
    output:
        alignment = os.path.join(align_out_dir,"split_alignments/{cluster}.fasta")
    threads: -1
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --nthreads auto \
            --remove-reference \
            --fill-gaps
        """

def _get_alignments(wildcards):
    checkpoint_output = checkpoints.partition_sequences.get(**wildcards).output[0]
    return expand(os.path.join(align_out_dir,"split_alignments/{i}.fasta"),
                  i=glob_wildcards(os.path.join(checkpoint_output, "{i}.fasta")).i)

rule aggregate_alignments:
    message: "Collecting alignments"
    input:
        alignments = _get_alignments
    output:
        alignment = os.path.join(align_out_dir,"aligned.fasta")
    shell:
        """
        cat {input.alignments} > {output.alignment}
        """

rule mask:
    message:
        """
        Mask bases in alignment
          - masking {params.mask_from_beginning} from beginning
          - masking {params.mask_from_end} from end
          - masking other sites: {params.mask_sites}
        """
    input:
        alignment = rules.aggregate_alignments.output.alignment
    output:
        alignment = os.path.join(align_out_dir,"masked.fasta")
    params:
        mask_from_beginning = 100,
        mask_from_end = 50,
        mask_sites = "18529 29849 29851 29853",
        script_dir = script_dir
    shell:
        """
        python3 {params.script_dir}mask-alignment.py \
            --alignment {input.alignment} \
            --mask-from-beginning {params.mask_from_beginning} \
            --mask-from-end {params.mask_from_end} \
            --mask-sites {params.mask_sites} \
            --output {output.alignment}
        """

rule get_seq_length:
    message:
        """
        Get seq length
        """
    input :
        align_file = rules.mask.output.alignment,
        fasta_temp = gisaid_fasta_mink
    output: 
        out_seq_length = os.path.join(align_out_dir,"seq_length.txt")
    params:
        script_dir = tool_dir
    shell:
        """
        python3 {params.script_dir}GetSeqLength.py \
            --alignment {input.align_file} \
            --output-seq-length {output.out_seq_length} 
        rm {input.fasta_temp}
        """ 

rule save_metadata:
    message:
        """
        Save metadata
        """
    input:
        trigger = rules.get_seq_length.output.out_seq_length
    output:
        metadata = os.path.join(align_out_dir,"metadata.tsv")
    run:
        pd_all.to_csv(output.metadata,sep="\t",index=False)

