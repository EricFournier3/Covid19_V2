from os import environ
from packaging import version
from socket import getfqdn
from getpass import getuser
from snakemake.logging import logger
import sys
import stat
import shutil
from shutil import which
import logging
import datetime
from datetime import timedelta
import os
import pandas as pd
import subprocess
from Bio import AlignIO


logging.basicConfig(level=logging.DEBUG)


#
# Verify that required versions of dependencies are installed.
#
MIN_AUGUR_VERSION = "7.0.2"

try:
    from augur.__version__ import __version__ as augur_version
except ModuleNotFoundError:
    logger.error("ERROR: Could not find augur. Follow installation instructions at https://nextstrain.org/docs/ and try again.")
    sys.exit(1)

if version.parse(augur_version) < version.parse(MIN_AUGUR_VERSION):
    logger.error("ERROR: Found version '%s' of augur, but version '%s' or greater is required" % (augur_version, MIN_AUGUR_VERSION))
    sys.exit(1)

SHELL_COMMANDS_NEEDED = ["augur", "iqtree", "mafft"]
for sh_cmd in SHELL_COMMANDS_NEEDED:
    if not which(sh_cmd):
        logger.error(f"ERROR: `{sh_cmd}` is not available as a shell command. Please follow installation instructions at https://nextstrain.org/docs/ and try again.")
        sys.exit(1)


def get_todays_date():
    date = datetime.datetime.today().strftime('%Y-%m-%d')
    return date

base_dir = "/data/PROJETS/COVID-19_Epidemio/Vison/"
script_dir = "/data/Applications/GitScript/Covid19_V2/NextStrainFiles/scripts/"
tool_dir = "/data/Applications/GitScript/Covid19_V2/NextStrainFiles/tools/"
align_out_dir = os.path.join(base_dir,"alignment_results")

metadata_all = os.path.join(base_dir,"metadata_2020-11-12_10-27.tsv")
pd_metadata_all = pd.read_csv(metadata_all,sep="\t",index_col=False)
pd_metadata_mink = pd_metadata_all.loc[pd_metadata_all['host'] == 'Neovison vison',:]


for index,row in pd_metadata_mink.iterrows():
    strain = str(row['strain'])
    #print(strain)
    subprocess.call(["seqkit","grep","-r","-p","^" + str(strain),os.path.join(base_dir,"sequences_2020-11-12_07-33_small.fasta")],stdout=open(os.path.join(base_dir,"gisaid_mink.fasta"),"a"))


rule files: 
    params:
        reference = os.path.join(base_dir,"reference.gb"),
        to_align = os.path.join(base_dir,"gisaid_mink.fasta")

files = rules.files.params

#print(files.reference)


checkpoint partition_sequences:
    input:
        sequences = files.to_align
    output:
        split_sequences = directory(os.path.join(align_out_dir,"split_sequences/pre/"))
    params:
        sequences_per_group = 50,
        script_dir = "/data/Applications/GitScript/Covid19_V2/NextStrainFiles/scripts/"
    shell:
        """
        python3 {params.script_dir}partition-sequences.py \
            --sequences {input.sequences} \
            --sequences-per-group {params.sequences_per_group} \
            --output-dir {output.split_sequences}
        """

rule partitions_intermediate:
    message:
        """
        partitions_intermediate: Copying sequence fastas
        {wildcards.cluster}
        """
    input:
        os.path.join(align_out_dir,"split_sequences/pre/{cluster}.fasta")
    output:
        os.path.join(align_out_dir,"split_sequences/post/{cluster}.fasta")
    shell:
        "cp {input} {output}"

rule align:
    message:
        """
        Aligning sequences to {input.reference}
          - gaps relative to reference are considered real
        Cluster:  {wildcards.cluster}
        """
    input:
        sequences = rules.partitions_intermediate.output,
        reference = files.reference
    output:
        alignment = os.path.join(align_out_dir,"split_alignments/{cluster}.fasta")
    threads: -1
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --nthreads auto \
            --remove-reference \
            --fill-gaps
        """

def _get_alignments(wildcards):
    checkpoint_output = checkpoints.partition_sequences.get(**wildcards).output[0]
    return expand(os.path.join(align_out_dir,"split_alignments/{i}.fasta"),
                  i=glob_wildcards(os.path.join(checkpoint_output, "{i}.fasta")).i)

rule aggregate_alignments:
    message: "Collecting alignments"
    input:
        alignments = _get_alignments
    output:
        alignment = os.path.join(align_out_dir,"aligned.fasta")
    shell:
        """
        cat {input.alignments} > {output.alignment}
        """

rule mask:
    message:
        """
        Mask bases in alignment
          - masking {params.mask_from_beginning} from beginning
          - masking {params.mask_from_end} from end
          - masking other sites: {params.mask_sites}
        """
    input:
        alignment = rules.aggregate_alignments.output.alignment
    output:
        alignment = os.path.join(align_out_dir,"masked.fasta")
    params:
        mask_from_beginning = 100,
        mask_from_end = 50,
        mask_sites = "18529 29849 29851 29853",
        script_dir = "/data/Applications/GitScript/Covid19_V2/NextStrainFiles/scripts/"
    shell:
        """
        python3 {params.script_dir}mask-alignment.py \
            --alignment {input.alignment} \
            --mask-from-beginning {params.mask_from_beginning} \
            --mask-from-end {params.mask_from_end} \
            --mask-sites {params.mask_sites} \
            --output {output.alignment}
        """

rule print_seq_length:
    message:
        """
        Print seq length
        """
    input :
        align_file = rules.mask.output.alignment
    output: 
        out_file = os.path.join(base_dir,"seq_length.txt")
    params:
        script_dir = "/data/Applications/GitScript/Covid19_V2/NextStrainFiles/tools/"
    shell:
        """
        python3 {params.script_dir}GetSeqLength.py \
            --alignment {input.align_file} \
            --output {output.out_file}
        """ 
 
