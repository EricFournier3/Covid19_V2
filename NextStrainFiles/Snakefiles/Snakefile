from os import environ
from packaging import version
from socket import getfqdn
from getpass import getuser
from snakemake.logging import logger
import sys
import stat
import shutil
from shutil import which

#
# Verify that required versions of dependencies are installed.
#
MIN_AUGUR_VERSION = "7.0.2"

try:
    from augur.__version__ import __version__ as augur_version
except ModuleNotFoundError:
    logger.error("ERROR: Could not find augur. Follow installation instructions at https://nextstrain.org/docs/ and try again.")
    sys.exit(1)

if version.parse(augur_version) < version.parse(MIN_AUGUR_VERSION):
    logger.error("ERROR: Found version '%s' of augur, but version '%s' or greater is required" % (augur_version, MIN_AUGUR_VERSION))
    sys.exit(1)

SHELL_COMMANDS_NEEDED = ["augur", "iqtree", "mafft"]
for sh_cmd in SHELL_COMMANDS_NEEDED:
    if not which(sh_cmd):
        logger.error(f"ERROR: `{sh_cmd}` is not available as a shell command. Please follow installation instructions at https://nextstrain.org/docs/ and try again.")
        sys.exit(1)


def get_todays_date():
    from datetime import datetime
    date = datetime.today().strftime('%Y-%m-%d')
    return date

# For information on how to run 'regions' runs, see Snakefile_Regions

# Add new regions here!
#EricF comment here
#REGIONS = ["_quebec","_global"]
#REGIONS = ["_global"]
REGIONS = ["_quebec"]

TRAIT_RESOLUTION = ["rta_exposure","rss_exposure"]
#TRAIT_RESOLUTION = ["rss_exposure"]


#nb_canadian_gisaid_seq_to_keep = "all"
nb_canadian_gisaid_seq_to_keep = "0"
nb_gisaid_seq_to_keep = "10"
nb_lspq_seq_to_keep = "30"
nextstrain_base_dir = "/data/Applications/GitScript/Covid19_V2/NextStrainFiles/"
current_dir = os.getcwd()
script_dir = os.path.join(current_dir,"scripts")
input_script = os.path.join(nextstrain_base_dir,"scripts","PrepareInput.sh")
config_dir = os.path.join(current_dir,"config")
data_dir = os.path.join(current_dir,"data")
yaml_config = os.path.join(nextstrain_base_dir,"config","Snakefile.yaml")

#EricF 20200526
user_colors = os.path.join(config_dir,"User_colors.yaml")

wildcard_constraints:
    region = "|".join(REGIONS) + "||",
    date = "[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]"

configfile: "Snakefile.yaml"


# simple rule to call snakemake for outsider users
rule all:
    input:
        auspice_json = "auspice/ncov.json",
        tip_frequencies_json = "auspice/ncov_tip-frequencies.json"

rule files: 
    params:
        include = "config/include.txt",
        exclude = "config/exclude.txt",
        reference = "config/reference.gb",
        outgroup = "config/outgroup.fasta",
        ordering = "config/ordering.tsv",
        color_schemes = "config/color_schemes.tsv",
        auspice_config = "config/auspice_config.json",
        auspice_config_gisaid = "config/auspice_config_gisaid.json",
        auspice_config_zh = "config/auspice_config_zh.json",
        lat_longs = "config/lat_longs.tsv",
        description = "config/description.md",
        description_zh = "config/description_zh.md",
        clades = "config/clades.tsv"

files = rules.files.params
sequences = config["sequences"],
metadata = config["metadata"]

#--group-by {params.group_by} \
#--sequences-per-group {params.sequences_per_group} \

rule filter:
    message:
        """
        Filtering to
          - excluding strains in {input.exclude}
          - minimum genome length of {params.min_length}
        """
    input:
        sequences = sequences,
        metadata = metadata,
        include = files.include,
        exclude = files.exclude
    output:
        sequences = "results/filtered.fasta"
    params:
        min_length = 27500,
        exclude_where = "date='2015'",
        #group_by = "rta year month",
        max_date = "2020-10-27"
        #sequences_per_group = 10000
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --include {input.include} \
            --exclude {input.exclude} \
            --min-length {params.min_length} \
            --max-date {params.max_date} \
            --output {output.sequences}
        """

checkpoint partition_sequences:
    input:
        sequences = rules.filter.output.sequences
    output:
        split_sequences = directory("results/split_sequences/pre/")
    params:
        sequences_per_group = 150
    shell:
        """
        python3 scripts/partition-sequences.py \
            --sequences {input.sequences} \
            --sequences-per-group {params.sequences_per_group} \
            --output-dir {output.split_sequences}
        """

rule partitions_intermediate:
    message:
        """
        partitions_intermediate: Copying sequence fastas
        {wildcards.cluster}
        """
    input:
        "results/split_sequences/pre/{cluster}.fasta"
    output:
        "results/split_sequences/post/{cluster}.fasta"
    shell:
        "cp {input} {output}"

rule align:
    message:
        """
        Aligning sequences to {input.reference}
          - gaps relative to reference are considered real
        Cluster:  {wildcards.cluster}
        """
    input:
        sequences = rules.partitions_intermediate.output,
        reference = files.reference
    output:
        alignment = "results/split_alignments/{cluster}.fasta"
    threads: -1
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --nthreads auto \
            --remove-reference \
            --fill-gaps
        """

def _get_alignments(wildcards):
    checkpoint_output = checkpoints.partition_sequences.get(**wildcards).output[0]
    return expand("results/split_alignments/{i}.fasta",
                  i=glob_wildcards(os.path.join(checkpoint_output, "{i}.fasta")).i)

rule aggregate_alignments:
    message: "Collecting alignments"
    input:
        alignments = _get_alignments
    output:
        alignment = "results/aligned.fasta"
    shell:
        """
        cat {input.alignments} > {output.alignment}
        """

rule mask:
    message:
        """
        Mask bases in alignment
          - masking {params.mask_from_beginning} from beginning
          - masking {params.mask_from_end} from end
          - masking other sites: {params.mask_sites}
        """
    input:
        alignment = rules.aggregate_alignments.output.alignment
    output:
        alignment = "results/masked.fasta"
    params:
        mask_from_beginning = 100,
        mask_from_end = 50,
        mask_sites = "18529 29849 29851 29853"
    shell:
        """
        python3 scripts/mask-alignment.py \
            --alignment {input.alignment} \
            --mask-from-beginning {params.mask_from_beginning} \
            --mask-from-end {params.mask_from_end} \
            --mask-sites {params.mask_sites} \
            --output {output.alignment}
        """

rule view_primer_binding_site_profile:
    message:
        """
        Create primer pcr primer binding sites profile
        - primer Sarbeco and Lspq
        """
    input:
        alignment = rules.aggregate_alignments.output.alignment
    output: 
        sarbeco_profil = "results/PrimerSarbeco.png",
        lspq_profil = "results/PrimerLspq.png"
    shell:
        """
        python3 ./scripts/CovidPrimerProfileInNextStrain.py \
            --input {input.alignment} \
            --out-sarbeco {output.sarbeco_profil} \
            --out-lspq {output.lspq_profil}
        """

rule subsample:
    input:
        rules.mask.output.alignment
    output:
        "results/subsampled_alignment{region}.fasta"
    shell:
        """
        cp {input} {output}
        """

rule adjust_metadata:
    input:
        metadata
    output:
        "results/metadata_adjusted{region}.tsv"
    shell:
        """
        cp {input} {output}
        """

rule tree:
    message: "Building tree"
    input:
        alignment = "results/subsampled_alignment{region}.fasta"
    output:
        tree = "results/tree_raw{region}.nwk"
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads AUTO
        """

def _get_alignments_for_tree(wildcards):
    """Global builds use the complete alignment of sequences while regional builds
    use a subsampled set of sequences.
    """
    if wildcards.region == "":
        return rules.mask.output.alignment
    else:
        return rules.subsample_regions.output.alignment

rule refine:
    message:
        """
        Refining tree
          - estimate timetree
          - estimate {params.date_inference} node dates
          - use {params.coalescent} coalescent timescale
        """
    input:
        tree = rules.tree.output.tree,
        alignment = _get_alignments_for_tree,
        metadata = "results/metadata_adjusted{region}.tsv"
    output:
        tree = "results/tree{region}.nwk",
        node_data = "results/branch_lengths{region}.json"
    threads: 40
    params:
        root = "Wuhan/WH01/2019",
        clock_rate = 0.0008,
        clock_std_dev = 0.0004,
        date_inference = "joint",
        divergence_unit = "mutations",
        clock_filter_iqd = 4,
        coalescent = "const"
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --root {params.root} \
            --timetree \
            --coalescent {params.coalescent} \
            --clock-rate {params.clock_rate} \
            --clock-std-dev {params.clock_std_dev} \
            --date-inference {params.date_inference} \
            --divergence-unit {params.divergence_unit} \
            --no-covariance \
            --clock-filter-iqd {params.clock_filter_iqd}
        """

rule ancestral:
    message:
        """
        Reconstructing ancestral sequences and mutations
          - inferring ambiguous mutations
        """
    input:
        tree = "results/tree{region}.nwk",
        alignment = _get_alignments_for_tree
    output:
        node_data = "results/nt_muts{region}.json"
    params:
        inference = "joint"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference} \
            --infer-ambiguous
        """


rule haplotype_status:
    message: "Annotating haplotype status relative to {params.reference_node_name}"
    input:
        nt_muts = rules.ancestral.output.node_data
    output:
        node_data = "results/haplotype_status{region}.json"
    params:
        reference_node_name = "Wuhan/WH01/2019"
    shell:
        """
        python3 scripts/annotate-haplotype-status.py \
            --ancestral-sequences {input.nt_muts} \
            --reference-node-name {params.reference_node_name:q} \
            --output {output.node_data}
        """

rule translate:
    message: "Translating amino acid sequences"
    input:
        tree = "results/tree{region}.nwk",
        node_data = rules.ancestral.output.node_data,
        reference = files.reference
    output:
        node_data = "results/aa_muts{region}.json"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output-node-data {output.node_data} \
        """


def _get_sampling_trait_for_wildcards(wildcards):
    mapping = {}
    return mapping[wildcards.region] if wildcards.region in mapping else "rta"

def _get_exposure_trait_for_wildcards(wildcards):
    mapping = {}
    return mapping[wildcards.region] if wildcards.region in mapping else "rta_exposure"

rule traits:
    message:
        """
        Inferring ancestral traits for {params.columns!s}
          - increase uncertainty of reconstruction by {params.sampling_bias_correction} to partially account for sampling bias
        """
    input:
        tree = "results/tree{region}.nwk",
        metadata = "results/metadata_adjusted{region}.tsv",
        weights = "config/weights.tsv"
    output:
        #node_data = "results/traits{region}.json",
        node_data = "results/traits{region}_{trait_resolution}.json",
    params:
#        columns = _get_exposure_trait_for_wildcards,
        columns = "{trait_resolution}",
        sampling_bias_correction = 2.5
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --output {output.node_data} \
            --columns {params.columns} \
            --confidence \
            --sampling-bias-correction {params.sampling_bias_correction} \
            --weights {input.weights} \
        """

rule clades:
    message: "Adding internal clade labels"
    input:
        tree = "results/tree{region}.nwk",
        aa_muts = rules.translate.output.node_data,
        nuc_muts = rules.ancestral.output.node_data,
        clades = files.clades
    output:
        clade_data = "results/clades{region}.json"
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output-node-data {output.clade_data}
        """

rule colors:
    message: "Constructing colors file"
    input:
        ordering = files.ordering,
        color_schemes = files.color_schemes,
        metadata = "results/metadata_adjusted{region}.tsv",
        user_colors = user_colors
    output:
        colors = "config/colors{region}.tsv"
    shell:
        """
        python3 scripts/assign-colors.py \
            --ordering {input.ordering} \
            --color-schemes {input.color_schemes} \
            --output {output.colors} \
            --metadata {input.metadata} \
            --user-colors {input.user_colors}
        """

rule recency:
    message: "Use metadata on submission date to construct submission recency field"
    input:
        metadata = "results/metadata_adjusted{region}.tsv"
    output:
        "results/recency{region}.json"
    shell:
        """
        python3 scripts/construct-recency-from-submission-date.py \
            --metadata {input.metadata} \
            --output {output}
        """

rule tip_frequencies:
    message: "Estimating censored KDE frequencies for tips"
    input:
        tree = rules.refine.output.tree,
        metadata = "results/metadata_adjusted{region}.tsv"
    output:
        tip_frequencies_json = "auspice/ncov{region}_tip-frequencies.json"
    params:
        min_date = 2020.0,
        pivot_interval = 1,
        narrow_bandwidth = 0.05,
        proportion_wide = 0.0
    shell:
        """
        augur frequencies \
            --method kde \
            --metadata {input.metadata} \
            --tree {input.tree} \
            --min-date {params.min_date} \
            --pivot-interval {params.pivot_interval} \
            --narrow-bandwidth {params.narrow_bandwidth} \
            --proportion-wide {params.proportion_wide} \
            --output {output.tip_frequencies_json}
        """

def export_title(wildcards):
    region = wildcards.region

    if not region:
        return "Genomic epidemiology of novel coronavirus"
    elif region == "_global":
        return "Genomic epidemiology of novel coronavirus - Global subsampling"
    else:
        region_title = region.lstrip("_").replace("-", " ").title()
        return f"Genomic epidemiology of novel coronavirus - {region_title}-focused subsampling"

rule export:
    message: "Exporting data files for for auspice"
    input:
        tree = rules.refine.output.tree,
        metadata = "results/metadata_adjusted{region}.tsv",
        branch_lengths = rules.refine.output.node_data,
        nt_muts = rules.ancestral.output.node_data,
        aa_muts = rules.translate.output.node_data,
        #traits = rules.traits.output.node_data,
        traits = expand(rules.traits.output.node_data,trait_resolution=TRAIT_RESOLUTION, allow_missing=True),
        auspice_config = files.auspice_config,
        colors = rules.colors.output.colors,
        lat_longs = files.lat_longs,
        description = files.description,
        clades = "results/clades{region}.json",
        recency = rules.recency.output
    output:
        auspice_json = "results/ncov_with_accessions{region}.json"
    params:
        title = export_title,
        geo_resolutions = "rta rss division country"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.nt_muts} {input.aa_muts} {input.traits} {input.clades} {input.recency} \
            --auspice-config {input.auspice_config} \
            --colors {input.colors} \
            --lat-longs {input.lat_longs} \
            --title {params.title:q} \
            --description {input.description} \
            --geo-resolutions {params.geo_resolutions} \
            --output {output.auspice_json}
        """

rule incorporate_travel_history:
    message: "Adjusting main auspice JSON to take into account travel history"
    input:
        auspice_json = rules.export.output.auspice_json,
        colors = rules.colors.output.colors,
        lat_longs = files.lat_longs
    params:
        sampling = "rta rss",
        exposure = "rta_exposure rss_exposure",
        #sampling = "rta",
        #exposure = "rta_exposure",
    output:
        auspice_json = "results/ncov_with_accessions_and_travel_branches{region}.json"
    shell:
        """
        python3 ./scripts/modify-tree-according-to-exposure.py \
            --input {input.auspice_json} \
            --colors {input.colors} \
            --lat-longs {input.lat_longs} \
            --sampling {params.sampling} \
            --exposure {params.exposure} \
            --output {output.auspice_json}
        """

'''

rule incorporate_travel_history:
    message: "Adjusting main auspice JSON to take into account travel history"
    input:
        auspice_json = rules.export.output.auspice_json,
        colors = rules.colors.output.colors,
        lat_longs = files.lat_longs
    params:
        sampling = "rta rss",
        exposure = "rta_exposure rss_exposure",
        #sampling = "rta",
        #exposure = "rta_exposure",
    output:
        auspice_json = "results/ncov_with_accessions_and_travel_branches{region}.json"
    shell:
        """
        python3 ./scripts/modify-tree-according-to-exposure.py \
            --input {input.auspice_json} \
            --colors {input.colors} \
            --lat-longs {input.lat_longs} \
            --sampling {params.sampling} \
            --exposure {params.exposure} \
            --output {output.auspice_json}
        """

'''

rule fix_colorings:
    message: "Remove extraneous colorings for main build"
    input:
        auspice_json = rules.incorporate_travel_history.output.auspice_json
    output:
        auspice_json = "auspice/ncov{region}.json"
    shell:
        """
        python scripts/fix-colorings.py \
            --input {input.auspice_json} \
            --output {output.auspice_json}
        """


rule dated_json:
    message: "Copying dated Auspice JSON"
    input:
        auspice_json = rules.fix_colorings.output.auspice_json,
        tip_frequencies_json = rules.tip_frequencies.output.tip_frequencies_json
    output:
        dated_auspice_json = "auspice/ncov{region}_{date}.json",
        dated_tip_frequencies_json = "auspice/ncov{region}_{date}_tip-frequencies.json"
    shell:
        """
        cp {input.auspice_json} {output.dated_auspice_json}
        cp {input.tip_frequencies_json} {output.dated_tip_frequencies_json}
        """

#EricF
rule clean_all:
    message: "Removing directories: {params}"
    params:
        "results ",
        "auspice ",
        "config ",
        "data ",
        "gisaid ",
        "init.txt ",
        "lspq ",
        "results ",
        "scripts ",
        "temp "
    
    shell:
        "rm -rfv {params}"

#EricF
rule clean_dat:
    message: "Removing directories: {params}"
    params:
        "config ",
        "data ",
        "gisaid ",
        "init.txt ",
        "lspq ",
        "scripts ",
        "temp "
    
    shell:
        "rm -rfv {params}"

#EricF
rule clean_res:
    message: "Removing directories: {params}"
    params:
        "results ",
        "auspice ",
        "config/colors_*"
    shell:
        "rm -rfv {params}"

#EricF
rule prepare_input:
    message: "Pepare input "
    run:
        print("In prepare input")
	
	os.mkdir(script_dir)
	os.mkdir(config_dir)

	shutil.copyfile(input_script,os.path.join(script_dir,os.path.basename(input_script)))
	os.chmod(os.path.join(script_dir,os.path.basename(input_script)),stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXG)

	shutil.copyfile(yaml_config,os.path.join(config_dir,os.path.basename(yaml_config)))
	os.chmod(os.path.join(config_dir,os.path.basename(yaml_config)),stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXG)

	os.system("./scripts/PrepareInput.sh " + current_dir + " " + nextstrain_base_dir + " " + nb_lspq_seq_to_keep + " " + nb_gisaid_seq_to_keep + " " + nb_canadian_gisaid_seq_to_keep) 
	

