include: "SnakefileBaseDivision"

ruleorder: subsample_regions > subsample
ruleorder: adjust_metadata_regions > adjust_metadata

sequences = config["sequences"],
metadata = config["metadata"]


rule all_regions:
    input:
        auspice_json = expand("auspice/ncov{region}.json", region=REGIONS),
        tip_frequencies_json = expand("auspice/ncov{region}_tip-frequencies.json", region=REGIONS),
        dated_auspice_json = expand("auspice/ncov{region}_{date}.json", date=get_todays_date(), region=REGIONS),
        dated_tip_frequencies_json = expand("auspice/ncov{region}_{date}_tip-frequencies.json", date=get_todays_date(), region=REGIONS)

rule clean_export_regions:
    message: "Removing export files: {params}"
    params:
        "results/ncov_with_accessions*.json",
        "config/colors*.tsv"
    shell:
        "rm {params}"

rule export_all_regions:
    message: "********************* IN EXPORT_ALL_REGIONS "
    input:
        colors_file = expand("config/colors{region}.tsv", region=REGIONS),
        auspice_json = expand("results/ncov_with_accessions{region}.json", region=REGIONS),
        lat_longs = files.lat_longs,
        metadata = expand("results/metadata_adjusted{region}.tsv", region=REGIONS),
        colors = expand("config/colors{region}.tsv", region=REGIONS),
    shell:
        """
        python3 ./scripts/check_missing_locations.py \
            --metadata {input.metadata} \
            --colors {input.colors} \
            --latlong {input.lat_longs} 
        echo "*************** IN export_all_regions"
        """

#edit group_by seq_per_group_regional max_dup_seq_per_group
rule subsample_focus:
    message:
        """
        Subsample all sequences into a focal set
        """
    input:
        sequences = rules.mask.output.alignment,
        metadata = metadata,
        include = files.include
    output:
        sequences = "results/subsample_focus{region}.fasta"
    params:
        group_by = "rta year month",
        seq_per_group_global = 10000, # i.e. if not regional build
        seq_per_group_regional = 10000,
        max_dup_seq_per_group = 2
    shell:
        """
        #Figure out what region being wanted
        rgn="{wildcards.region}"

        if [ "$rgn" = "_global" ]; then
            seq_per_group={params.seq_per_group_global}
            regionarg="--exclude-where division="
            region="frog"   #I don't know! It wouldn't work without something!
            echo "Filtering for a global run - $seq_per_group per rta"
        else
            seq_per_group={params.seq_per_group_regional}
            region="${{rgn//[_y]/}}"
            region="${{region//[-y]/ }}"
            echo "Filtering for a focal run on $region - $seq_per_group per rta"
            regionarg="--exclude-where division!="
            echo "   This is passed to augur as $regionarg'$region'"
        fi

        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --include {input.include} \
            $regionarg"$region" \
            --group-by {params.group_by} \
            --sequences-per-group $seq_per_group \
            --max-dup-per-group {params.max_dup_seq_per_group} \
            --output {output.sequences} \

        """

rule make_priorities:
    message:
        """
        determine priority for inclusion in as phylogenetic context by
        genetic similiarity to sequences in focal set.
        """
    input:
        alignment = rules.mask.output.alignment,
        metadata = metadata,
        focal_alignment = rules.subsample_focus.output.sequences
    output:
        priorities = "results/subsampling_priorities{region}.tsv"
    resources:
        mem_mb = 4000
    shell:
        """
        #Figure out what region being wanted
        rgn="{wildcards.region}"

        if [ "$rgn" = "_global" ]; then
            echo "Global run - no priorities needed"
            echo -n >{output.priorities}
        else
            region="${{rgn//[_y]/}}"
            region="${{region//[-y]/ }}"
            echo "Creating priorities for focal build on $region"
            python3 scripts/priorities.py --alignment {input.alignment} \
                            --metadata {input.metadata} \
                            --focal-alignment {input.focal_alignment} \
                            --output {output.priorities}
        fi
        """

#edit group_by max_dup_seq_per_group sequences_per_group all_canadian_seq
rule subsample_context:
    message:
        """
        Subsample the non-focal sequences to provide phylogenetic context
        """
    input:
        sequences = rules.mask.output.alignment,
        metadata = metadata,
        priorities = rules.make_priorities.output.priorities
    output:
        sequences = "results/subsample_context{region}.fasta"
    params:
        group_by = "country year month",
        max_dup_seq_per_group = 1,
        sequences_per_group = 3,
        all_canadian_seq = True
    shell:
        """
        #Figure out what region being wanted
        rgn="{wildcards.region}"
        
        all_canadian_seq_option=""        

        if [ "{params.all_canadian_seq}" == "True" ]
            then
            all_canadian_seq_option="--all-canadian-seq"
        fi

        if [ "$rgn" = "_global" ]; then
            echo "Global run - no context needed"
            echo -n >{output.sequences}
        else
            region="${{rgn//[_y]/}}"
            region="${{region//[-y]/ }}"
            echo "Creating a filtered context for a focal run on $region. Context is {params.sequences_per_group}seqs per '{params.group_by}'"
            regionarg="--exclude-where division="
            echo "   (This is passed to 'augur filter' as \"$regionarg'$region'\")"

            augur filter \
                $regionarg"$region" \
                --sequences {input.sequences} \
                --metadata {input.metadata} \
                --priority {input.priorities} \
                --group-by {params.group_by} \
                --sequences-per-group {params.sequences_per_group} \
                --max-dup-per-group {params.max_dup_seq_per_group} \
                --output {output.sequences} \
                $all_canadian_seq_option \
                
        fi
        """

rule subsample_regions:
    message:
        """
        Combine and deduplicate FASTAs
        """
    input:
        rules.subsample_focus.output.sequences,
        rules.subsample_context.output.sequences
    output:
        alignment = "results/subsampled_alignment{region}.fasta"
    shell:
        """
        python3 scripts/combine-and-dedup-fastas.py \
            --input {input} \
            --output {output.alignment}
        """

rule adjust_metadata_regions:
    input:
        metadata = metadata
    output:
        metadata = "results/metadata_adjusted{region}.tsv"
    shell:
        """
        #Figure out what region being wanted
        rgn="{wildcards.region}"

        if [ "$rgn" = "_global" ]; then
            echo "Global run - no metadata adjustment needed"
            cp {input.metadata} {output.metadata}
        else
            region="${{rgn//[_y]/}}"
            region="${{region//[-y]/ }}"
             echo "Focal run for $region - adjusting metadata"

            python3 scripts/adjust_regional_meta.py \
                                    --region "$region" \
                                    --metadata {input.metadata} \
                                    --output {output.metadata}
        fi
        """





